fetch this api, fetch the popular items from this api.
- because its data that i need to wait for i want to make sure that i have the data first before i rendering anything out
when the component esentially gets render or munted i want to run this function as soon as possible.
- RUNING THIS GETPOPULAR FOODS AS SOON AS THE COMPOENNT GETS MOUNTED, [] ONLY RUN IT WHEN THE COMPONENT GETS MOUNTED maybe a value in app gets updated,searching for something every time my search changes run this function again
its kind a like a var taht hold info but the advantage of it is when the var changes so all the that chagnes in that var the ui reacts to it 
setPopularFoods allow to modify.

getting all the data from array and mapping over it.
going through each one of the object and outputing something
from the dom

<div>
{popularFoods.map((recipe) => {
  return (
    <Wrapper key={recipe.id}>
      <h3>Popular Picks</h3>
    </Wrapper>
  );
})}
</div>

2. carousel its gonna be the splide comp and splideside is gonna be each individual image or card
each card its gonna be a slide

function Popular() {
  const [popularFoods, setPopularFoods] = useState([]);

  useEffect(() => {
    getPopularfoods();
  }, []);

  const getPopularfoods = async () => {
    const api = await fetch(
      `https://api.spoonacular.com/recipes/random?apiKey=${process.env.REACT_APP_API_KEY}&number=10`
    );
    const data = await api.json();
    setPopularFoods(data.recipes);
    console.log(data);
  };
  return (
    <div>
      {popularFoods.map((recipe) => {
        return (
          <Wrapper key={recipe.id}>
            <h3>Popular Picks</h3>
            <Splide>
              {popularFoods.map((recipe) => {
                return (
                  <SplideSlide>
                    <Card key={recipe.id}>
                      <p>{recipe.title}</p>
                      <img src={recipe.image} alt={recipe.title} />
                    </Card>
                  </SplideSlide>
                );
              })}
            </Splide>
          </Wrapper>
        );
      })}
    </div>
  );
}


import "@splidejs/splide/dist/css/splide.min.css";

store my search here into local storage
cehck if anything in local storage if there is nothing on ls i will set it else is somnething in ls then i will just set my state to it

useparams allows me to pull out the keyword from the url /italian.
when i invoke the function i passed the name 
need to set the cuisine in the state 
run the function getcuisine in useffect whenb the comp gets mounted the pg gets mounted i pass in italian base on the url 

get the value from the input 
need to hook up an event handler and say onCHange so when i start typing stuff run a function 
onENter i want to load up another pg
url chagnes si cu useNavigate navigam spre pagina specificata cand cautam in input ceva

3) when i click on any recipe from cuisine bring me to details
looping over each recipe and give us the id.
so when i arrive on detail page i can basically use params and extract this id and do another api request.
get stuff from the url fetch soemthing and render it out



how to render out html data from an api in ract



API PROBLEM 
making a get request happen on the backend and then use the frontnend to get the data that is returned back to use from the backend on our frontend
- take the api key and any logic used to make calls to that API using the api key should be on the server, so any calls i make to that api using the key,
should be on the node js server on the backend isolated from the frontend.

SO i want to call an api with that particular x key put the http request inside of an function in nodejs server and make a call from the frontend to that function on the backend will then use 
that API key to make the request the request will come to the nodejs server and then the response will be sent back to the frontend
- cross protects me from this particular issue
ex: 
i have a website www.zolika.com and i have an API key and on that api i configured 2 request from that ip address that server me and only requests from that server can access the api but you still need the api key.
i can be on postman using the same api key trying to access the api server and it will not accept that request it will deny that request because of corse

(`http://localhost:7000/details/${details}`);

#13412D

#06532F
background-color: rgba(19, 65, 45, 0.88);
17, 80 33
v

1) tricks
position fixed 
width: 25rem
aspect ratio 1/1
inset 0 
margin auto


js node js express axios and cherio


Axios is an HTTP client library that allows you to make requests to a given endpoint:

// video detail page wher i can play the video and get the list videos related to that
navigate to specific url.
empty string then update the search term everytime when i type something setsearchterm(e.target.value).
how do i pass over to the url to my query.=> adding handle submit fun onsubmit={}
when submit the forms always refresh the page in react doesnt exist
handlesubmit = (e) => {
e.prevent

}

fetch the data i need, get the id of hte video first to fetch the data for 


















































<svg xmlns="http://www.w3.org/2000/svg" class="hero-design" width="618" height="672" viewBox="0 0 618 672">
        <g id="hero-mydesign" transform="translate(-1025 -261)">
          <rect
            id="Rectangle_52"
            class="square-anim"
            data-name="Rectangle 52"
            width="156"
            height="171"
            rx="30"
            transform="translate(1025 591)"
            fill="#A49EB8"
            opacity="50%"
          />
          <rect
            id="Rectangle_56"
            class="square-anim"
            data-name="Rectangle 56"
            width="156"
            height="171"
            rx="30"
            transform="translate(1181 762)"
            fill="#fff"
          />
          <rect
            id="Rectangle_58"
            class="square-anim"
            data-name="Rectangle 58"
            width="156"
            height="171"
            rx="30"
            transform="translate(1181 428)"
            fill="#fff"
          />
          <rect
            id="Rectangle_53"
            class="square-anim"
            data-name="Rectangle 53"
            width="156"
            height="171"
            rx="30"
            transform="translate(1334 261)"
            fill="#4b3f72"
          />
          <rect
            id="Rectangle_54"
            class="square-anim"
            data-name="Rectangle 54"
            width="156"
            height="171"
            rx="30"
            transform="translate(1487 428)"
            fill="#4b3f72"
            opacity="0.5"
          />
          <rect
            id="Rectangle_55"
            class="ellipse_"
            class="square-anim"
            data-name="Rectangle 55"
            width="156"
            height="171"
            rx="30"
            transform="translate(1331 599)"
            fill="#4b3f72"
          />
          <g
            id="Ellipse_8"
            class="ellipse_"
            data-name="Ellipse 8"
            transform="translate(1181 599)"
            fill="#ffc857"
            stroke="#707070"
            stroke-width="1"
          >
            <ellipse  cx="76.5" cy="81.5" rx="76.5" ry="81.5" stroke="none" />
            <ellipse  cx="76.5" cy="81.5" rx="76" ry="81" fill="none" />
          </g>
          <g
            id="Ellipse_7"
            data-name="Ellipse 7"
            transform="translate(1337 432)"
            fill="#119da4"
            stroke="#707070"
            stroke-width="1"
          >
            <ellipse cx="75" cy="83.5" rx="75" ry="83.5" stroke="none" />
            <ellipse cx="75" cy="83.5" rx="74.5" ry="83" fill="none" />
          </g>
        </g>
      </svg>

      .colorcont {
        background-color: #fdfffc;
        transform: translateZ(40px);
      }

      
      section > article > .title {
        color: white;
        font-size: 30px;
        font-weight: bold;
        margin-top: 3em;
        padding-top: 3em;
        text-align: center;
      }


      .section2 > article > img {
        width: 100%;
        background-size: contain;
        object-fit: cover;
        cursor: pointer;
      }
      
      .section3 > article > img {
        width: 100%;
        background-size: contain;
        object-fit: cover;
        cursor: pointer;
      }
      
      .section4 > article > img {
        width: 100%;
        background-size: contain;
        cursor: pointer;
        padding: 1em;
      }



      Top 10 css one linear

      vertical text (flip  the text over in vettical pos ) writting-mode : vertical-lr
      gap with dispaly flex
    flip over an image either oriozntal or vertical transofrm scaleX (-1)
    smooth scrolling scroll-behavior:smooth
    ScrollSnapping carousel cards 
    container {
      width height df overflow-x: scroll
      scroll-snap-type: x mandatory
    }

    //each individual item i tell where it wants to snap to

    container div{
      min-width
      df
      jsc
      alignce
      scroll-snap-align:center
    }

    Resize everything

    box{

      overflow: auto;
      resize: both vertical
    }

    Truncate
    to cut my text off i dont want to show up all all the text

    box p{
      d: webit box;
      webkit line clamp: 1
      webkit box orient: vertical
      overflow: hidden
    }

    Text gradients
    it works on the baground issue, make the text transparent and will basically mask it to the text

    h1{
      back: liner-gradient(to right, rgb() ...)
      webkit-back-clip:text  clips the gradeint to the text right now
      webkit-text-fill-color: transparent
    }


    object fit (no widht no height)

    box{
width:25rem;
height:25rem (White gap i want to fill all the way up)
    }

    box img{

      width:100%:; (its scale according to the size of the box)
      height:100%;
   object-fill:cover
    }

    weird stretching (stretching aspect ratio problem )



    Pointer events

    pointer event: none 
    opacity: 0 

    is really strong because i can animate this text

    h1{ 
aimation : fade 1s ease-in(timing functioin) 1s
display: none (its get remove from the dom tree)
pointer-events:none;
opacity: 0

    }

    @keyframe fade {

      0%{
        opacity: 0
      }

      100%{
        oapcity: 1
      }
    }


    const { default: gsap } = require("gsap/all");


    <!-- <script
      src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.6.1/gsap.min.js"
      integrity="sha512-cdV6j5t5o24hkSciVrb8Ki6FveC2SgwGfLE31+ZQRHAeSRxYhAQskLkq3dLm8ZcWe1N3vBOEYmmbhzf7NTtFFQ=="
      crossorigin="anonymous"
    ></script> -->

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css" integrity="sha512-xh6O/CkQoPOWDdYTDqeRdPCVd1SpvCA9XXcUnZS2FmJNp1coAFzvtCN9BmamE+4aHK8yyUHUSCcJHgXloTyT2A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
















    <li class="menu-item">
    <a href="" target="_blank">
      <svg
        id="Layer_1"
        style="enable-background: new 0 0 62 62"
        version="1.1"
        viewBox="0 0 62 62"
        width="32px"
        height="32px"
        xml:space="preserve"
        xmlns="http://www.w3.org/2000/svg"
        xmlns:xlink="http://www.w3.org/1999/xlink"
      >
        <style type="text/css">
          .st0 {
            fill: #5fd2ff;
          }
          .st1 {
            fill: #ffffff;
          }
          .st2 {
            fill: #0082ed;
          }
          .st3 {
            fill: #2ba8fc;
          }
          .st4 {
            fill: #cecece;
          }
          .st5 {
            fill: #f92b75;
          }
          .st6 {
            fill: #3bb0ff;
          }
          .st7 {
            fill: #ce004f;
          }
          .st8 {
            fill: none;
            stroke: #ed0c68;
            stroke-width: 5;
            stroke-linecap: round;
            stroke-linejoin: round;
            stroke-miterlimit: 10;
          }
          .st9 {
            fill: #ed0c68;
          }
          .st10 {
            fill: #78ded4;
          }
          .st11 {
            fill: #1e5363;
          }
          .st12 {
            fill: #54c8e8;
          }
          .st13 {
            fill: #f4f4f4;
          }
          .st14 {
            fill: #0c82eb;
          }
          .st15 {
            fill: #00b2e3;
          }
          .st16 {
            fill: #68a2b9;
          }
          .st17 {
            fill: #a2c5d3;
          }
          .st18 {
            fill: #76777a;
          }
          .st19 {
            fill: #a7a8a9;
          }
          .st20 {
            fill: #d6d6d6;
          }
          .st21 {
            fill: none;
            stroke: #f92b75;
            stroke-width: 5;
            stroke-linecap: round;
            stroke-linejoin: round;
            stroke-miterlimit: 10;
          }
          .st22 {
            fill: #fd4a5c;
          }
          .st23 {
            fill: #ff8e9f;
          }
          .st24 {
            fill: none;
            stroke: #f458a3;
            stroke-width: 5;
            stroke-linecap: round;
            stroke-linejoin: round;
            stroke-miterlimit: 10;
          }
          .st25 {
            fill: #ffb259;
          }
          .st26 {
            fill: #f32735;
          }
          .st27 {
            fill: #ff9e18;
          }
          .st28 {
            fill: #ffc27a;
          }
          .st29 {
            fill: #ffc56d;
          }
          .st30 {
            fill: none;
            stroke: #fd4a5c;
            stroke-width: 5;
            stroke-linecap: round;
            stroke-linejoin: round;
            stroke-miterlimit: 10;
          }
          .st31 {
            fill: #0069a7;
          }
          .st32 {
            fill: #d8d8d8;
          }
          .st33 {
            fill: #8cb7c9;
          }
          .st34 {
            fill: #65baaf;
          }
          .st35 {
            fill: #00af9a;
          }
          .st36 {
            fill: #00c4b3;
          }
          .st37 {
            fill: #19d3c5;
          }
          .st38 {
            fill: none;
            stroke: #54c8e8;
            stroke-width: 5;
            stroke-linecap: round;
            stroke-linejoin: round;
            stroke-miterlimit: 10;
          }
          .st39 {
            fill: #8331a7;
          }
          .st40 {
            fill: #009383;
          }
          .st41 {
            fill: #98989a;
          }
          .st42 {
            fill: #636569;
          }
          .st43 {
            fill: #898a8d;
          }
          .st44 {
            fill: #ffb548;
          }
          .st45 {
            fill: none;
            stroke: #ffb548;
            stroke-width: 5;
            stroke-linecap: round;
            stroke-linejoin: round;
            stroke-miterlimit: 10;
          }
          .st46 {
            fill: #ed40a9;
          }
          .st47 {
            fill: #cb007b;
          }
          .st48 {
            fill: #e50695;
          }
          .st49 {
            fill: #d7282f;
          }
          .st50 {
            fill: #e5e5e5;
          }
          .st51 {
            fill: #ffa4b4;
          }
          .st52 {
            fill: #f6a7d7;
          }
          .st53 {
            fill: #f478c4;
          }
          .st54 {
            fill: #e0c7e6;
          }
          .st55 {
            fill: #b980d0;
          }
          .st56 {
            fill: #d9b7e2;
          }
          .st57 {
            fill: #badf93;
          }
          .st58 {
            fill: #4c9c2e;
          }
          .st59 {
            fill: #3dae2b;
          }
          .st60 {
            fill: #aada91;
          }
          .st61 {
            fill: #6abf4b;
          }
          .st62 {
            fill: #efb8a9;
          }
          .st63 {
            fill: #fecb8b;
          }
          .st64 {
            fill: #bde8ef;
          }
          .st65 {
            fill: #cca1dd;
          }
          .st66 {
            fill: #b2b2b2;
          }
          .st67 {
            fill: none;
            stroke: #ff8300;
            stroke-width: 5;
            stroke-linecap: round;
            stroke-linejoin: round;
            stroke-miterlimit: 10;
          }
          .st68 {
            fill: none;
            stroke: #ff9e18;
            stroke-width: 5;
            stroke-linecap: round;
            stroke-linejoin: round;
            stroke-miterlimit: 10;
          }
          .st69 {
            fill: #96daea;
          }
          .st70 {
            fill: #ff8300;
          }
          .st71 {
            fill: none;
            stroke: #6abf4b;
            stroke-width: 5;
            stroke-linecap: round;
            stroke-linejoin: round;
            stroke-miterlimit: 10;
          }
          .st72 {
            fill: none;
          }
          .st73 {
            fill: #444444;
          }
          .st74 {
            fill: #fdcf85;
          }
        </style>
        <g>
          <rect
            class="st13"
            height="39.84"
            width="57.08"
            x="2.5"
            y="11.08"
          />
          <path
            class="st14"
            d="M59.58,53.34H2.5c-1.34,0-2.42-1.08-2.42-2.42V11.08c0-1.34,1.08-2.42,2.42-2.42h57.08   c1.34,0,2.42,1.08,2.42,2.42v39.84C62,52.26,60.92,53.34,59.58,53.34z M4.92,48.5h52.24V13.5H4.92V48.5z"
          />
          <path
            class="st14"
            d="M2.5,53.34c-0.62,0-1.24-0.24-1.71-0.71c-0.94-0.94-0.94-2.48,0-3.42l19.51-19.5c0.95-0.94,2.48-0.94,3.42,0   c0.94,0.94,0.94,2.48,0,3.42L4.21,52.63C3.74,53.1,3.12,53.34,2.5,53.34z"
          />
          <path
            class="st15"
            d="M2.5,53.42c-0.64,0-1.28-0.24-1.77-0.73c-0.98-0.98-0.98-2.56,0-3.54l19.51-19.5c0.98-0.98,2.56-0.98,3.54,0   c0.98,0.98,0.98,2.56,0,3.54L4.27,52.69C3.78,53.18,3.14,53.42,2.5,53.42z"
          />
          <path
            class="st14"
            d="M59.58,53.34c-0.62,0-1.24-0.24-1.71-0.71l-19.51-19.5c-0.94-0.94-0.95-2.48,0-3.42   c0.94-0.94,2.48-0.94,3.42,0l19.51,19.5c0.94,0.94,0.95,2.48,0,3.42C60.82,53.1,60.2,53.34,59.58,53.34z"
          />
          <path
            class="st16"
            d="M31.04,41.95c-1.44,0-2.84-0.6-3.84-1.64L0.76,12.75c-0.67-0.7-0.86-1.73-0.48-2.62   C0.66,9.24,1.53,8.66,2.5,8.66h57.08c0.97,0,1.84,0.58,2.22,1.47c0.38,0.89,0.19,1.92-0.48,2.62L34.88,40.31v0   C33.88,41.35,32.48,41.95,31.04,41.95z M8.18,13.5l22.52,23.47c0.24,0.25,0.46,0.25,0.7,0v0L53.91,13.5H8.18z"
          />
          <path
            class="st15"
            d="M2.5,41.14c-1.38,0-2.5-1.12-2.5-2.5V11.08c0-1.38,1.12-2.5,2.5-2.5h27.1c1.38,0,2.5,1.12,2.5,2.5   s-1.12,2.5-2.5,2.5H5.01v25.06C5.01,40.02,3.89,41.14,2.5,41.14z"
          />
          <path
            class="st15"
            d="M2.5,53.43c-1.38,0-2.5-1.12-2.5-2.5V38.64c0-1.38,1.12-2.5,2.5-2.5s2.5,1.12,2.5,2.5v12.29   C5.01,52.3,3.89,53.43,2.5,53.43z"
          />
          <path
            class="st17"
            d="M28.95,41.06c-0.64,0-1.27-0.25-1.75-0.74L0.76,12.75c-0.67-0.7-0.86-1.73-0.48-2.62   C0.66,9.24,1.53,8.66,2.5,8.66h28.54c1.34,0,2.42,1.08,2.42,2.42s-1.08,2.42-2.42,2.42H8.18l22.52,23.47   c0.93,0.96,0.89,2.5-0.07,3.42C30.15,40.83,29.55,41.06,28.95,41.06z"
          />
        </g>
      </svg>
      Email
    </a>
  </li>


  getBoundingClientRect() this method will return object containing props about the suround rectangle of an element
  width, height, top, left, bottom right as well as x and y coordinates
  return a dom rect object
  botom prop: refers the amount of space between the top of the browser window and the bottom of the square
  height: of the square
  left: is the space between the the browser window and the left of the square
  right: same thing
  top: top of the window and top of the square
  x: is the x space in the top left corner
  y: is the y space between the top of the browser and the top left corner

  actually give me relative value to the top left corner of the browser window
  

  also this include border of the element

  example: add some content before the actual box and then when i scroll down when this box comes to view i can change the bg color of that box
 



  <!-----///////  THE END OF THE GSAP ANIMATION  ///////-->

  <!-----///////  THE TILT ANIMATION  ///////-->
<script>


VanillaTilt.init(document.querySelectorAll(".tilt, .tilt2, .tilt3"), {
max: 25,
speed: 350,
glare: true,
"max-glare": 0.3,
easing: "cubic-bezier(0.16, 1, 0.3, 1)",
gyroscope: true,
gyroscopeMinAngleX: -75,    
gyroscopeMaxAngleX: 75,      
gyroscopeMinAngleY: -75,    
gyroscopeMaxAngleY: 75,


});
</script>
 <!-----///////  END OF THE TILT ANIMATION  ///////-->

 transform-style: preserve-3d;
 transform: perspective(1000px);




 // const [sidebar, setSidebar] = useState(false);

 // const showSidebar = () => setSidebar(!sidebar);




 h4 {
  color: white;
  text-align: center;
  width: 100%;
  /* position: absolute; */
  z-index: 99;
  /* left: 50%;
  bottom: 0%;
  transform: translate(-50%, 0%); */
  color: white;
  text-align: center;
  font-weight: 600;
  font-size: 1rem;
  height: 40%;
  display: flex;
  justify-content: center;
  align-items: center;
}







@media screen and (min-width: 75em) {
  display: grid;
  grid-column: 2/2;
  background-color: #000000;
  column-gap: 1rem;
}

@media (min-width: 85em) {
  display: flex;
}






/* position: relative; */
/* max-width: 100%;
width: 600px;
height: 400px;
object-fit: cover;
object-position: center; */


/* @media screen and (min-width: 75em) {
  display: grid;
  place-items: center;
}

@media (min-width: 85em) {
  display: flex;
} */


//stacked the content on top of each other and i will create an utility class
  /* .stacked {
    display: grid;
  } */


  const FormSearchBar = styled.form`
  display: flex;
  flex-direction: column;
  width: 34em;
  height: 3.8em;
  background-color: rgb(253, 239, 214);
  border-radius: 1.5rem;
  overflow: hidden;
  .row {
    position: relative;
  }

  input {
    width: 100%;
    min-width: 250px;
    border: none;
    background-color: rgb(253, 239, 214);
    font-size: 1.5rem;
    color: black;
    border-radius: 1.5rem;
    outline: none;
    padding: 1rem 2.5rem;
  }

  svg {
    position: absolute;
    top: 50%;
    left: 0%;
    transform: translate(100%, -50%);
    color: black;
    margin-right: 2rem;
  }

  svg {
    position: absolute;
    top: 50%;
    left: 0%;
    transform: translate(100%, -50%);
    color: black;
    margin-right: 2rem;
  }

  https://api.spoonacular.com/recipes/complexSearch?apiKey=${process.env.REACT_APP_API_KEY}&query=${name}&number=10



















  import React, { useEffect, useRef, useState } from "react";
import styled from "styled-components";
import { FaSearch } from "react-icons/fa";
import { IoIosClose } from "react-icons/io";
import { useNavigate } from "react-router-dom";
import Form from "react-bootstrap/Form";
import { AnimatePresence, motion } from "framer-motion";
import { useClickOutside } from "react-click-outside-hook";
import BounceLoader from "react-spinners/BounceLoader";
import { useDebouncer } from "../hooks/debouncerHook";
import "../design/Search.css";
function Search() {
  /** track is expanded or collapsed */
  //when the state is triggered and is expanded is true i want to show, animate the height prop of the FormSearchBar so if it focused and i want to expanded
  const [input, setInput] = useState("");
  const [isExpanded, setExpanded] = useState(false);
  const [ref, isClickedOutside] = useClickOutside();
  const [isLoading, setLoading] = useState(false);

  const inputRef = useRef();
  const navigate = useNavigate();
  const submitHandler = (e) => {
    e.preventDefault();
    navigate("/searched/" + input);
  };

  const containerVariants = {
    expanded: {
      height: "20em",
    },
    collapsed: {
      height: "3.8em",
    },
  };
  //two controls functions
  //no argumetns whatever so i can now directly pass it through into the callback of any kind of event handler on the components.

  // const expandContainer = () => {
  //   setExpanded(true);
  // };

  // const collapseContainer = () => {
  //   setExpanded(false);
  //   setLoading(false);

  //   setInput("");

  //   //when i type something and click outside of the input collapssed same for the close icon.
  //   //Need to hold the ref attr to the ref to the particular input
  //   if (inputRef.current) {
  //     inputRef.current.value = "";
  //   }
  // };

  const containerTransition = { type: "spring", damping: 22, stiffness: 130 };

  // useEffect(() => {
  //   if (isClickedOutside) collapseContainer();
  // }, [isClickedOutside]);

  return (
    <div style={{ display: "flex", justifyContent: "center" }}>
      <FormSearchBar
        action=""
        onSubmit={submitHandler}
        animate={isExpanded ? "expanded" : "collpased"}
        variants={containerVariants}
        ref={ref}
        transition={containerTransition}
      >
        <SearchInputContainer>
          <SearchIcon>
            <FaSearch />
          </SearchIcon>

          <SearchInput
            onChange={(e) => setInput(e.target.value)}
            type="text"
            value={input}
            className="input"
            placeholder="Search for Recipes"
            onFocus={expandContainer}
            ref={inputRef}
          />

          <AnimatePresence>
            {isExpanded && (
              <CloseIcon
                key="close-icon"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ oapcity: 0 }}
                transition={{ duration: 0.2 }}
                onClick={collapseContainer}
              >
                <IoIosClose />
              </CloseIcon>
            )}
          </AnimatePresence>
        </SearchInputContainer>
        <LineSeparator />
        <SearchContent>
          {isLoading && (
            <LoadingWrapper>
              <BounceLoader
                loading={true}
                color="#000"
                size={35}
                speedMultiplier={1.5}
              />
            </LoadingWrapper>
          )}
        </SearchContent>
      </FormSearchBar>
    </div>
  );
}
const FormSearchBar = styled(motion.form)`
  display: flex;
  flex-direction: column;
  width: 34em;
  height: 3.8em;
  background-color: rgb(253, 239, 214);
  border-radius: 1.5rem;
  overflow: hidden;

  .svg {
    position: absolute;
    top: 50%;
    left: 0%;
    transform: translate(100%, -50%);
    color: black;
  }
`;

const SearchInputContainer = styled.div`
  width: 100%;
  min-height: 4em;
  display: flex;
  align-items: center;
  position: relative;
  padding: 2px 15px;
`;
const SearchInput = styled.input`
  width: 100%;
  height: 100%;
  min-width: 250px;
  border: none;
  outline: none;
  background-color: rgb(253, 239, 214);
  font-size: 1.4rem;
  color: black;
  border-radius: 1.5rem;
  padding: 1rem 2.5rem;

  &:focus {
    outline: none;
    &::placeholder {
      opacity: 0;
    }
  }

  &::placeholder {
    color: #474545;
    transition: all 250ms ease-in-out;
  }
`;

const CloseIcon = styled(motion.span)`
  color: black;
  font-size: 2rem;
  margin-top: 6px;
  vertical-align: middle;
  transition: all 200ms ease-in-out;
  cursor: pointer;

  &:hover {
    color: #474545;
  }
`;

const SearchIcon = styled.span`
  color: black;
  font-size: 1.4rem;
  margin-right: 10px;
  margin-top: 6px;
  vertical-align: middle;
  transition: all 200ms ease-in-out;
  cursor: pointer;
`;

const LineSeparator = styled.span`
  display: flex;
  min-width: 100%;
  min-height: 2px;
  background-color: #474545;
`;

const SearchContent = styled.div`
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  padding: 1em;
`;

const LoadingWrapper = styled.div`
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
`;

export default Search;
